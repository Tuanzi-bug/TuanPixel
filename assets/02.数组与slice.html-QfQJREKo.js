import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o,c,a as n,d as s,b as t,e as i}from"./app-NQzcIKZ2.js";const l={},u=i(`<h1 id="数组与slice原理" tabindex="-1"><a class="header-anchor" href="#数组与slice原理"><span>数组与Slice原理</span></a></h1><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h3><p>数组是一个具有固定长度且拥有0个或者多个相同数据类型元素的序列。</p><p>数组的每一个元素都是通过索引去访问的，索引从0到数组长度减一。Go内置的函数<code>len</code>可以返回数组中元素个数。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	b<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>
	c<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>
	d<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;a:&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;b:&quot;</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c:&quot;</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;d:&quot;</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211024192051.png" alt="image-20211024192051643" tabindex="0" loading="lazy"><figcaption>image-20211024192051643</figcaption></figure><p>默认情况下，声明一个数组<code>var a [3]int</code> ,元素的初始化值是元素类型的零值。（对于<code>int</code>,对应的零值就是0）</p><p>同时可以使用数组字面量根据一组值来初始化一个数组（<code>b:=[3]int{1,2,3}</code>）。</p><p>如果省略号<code>...</code>代替数组长度，那么数组长度由初始化数组的元素个数决定。（<code>c:=[...]int{1,2,3}</code> 长度为3）</p><p><strong>数组长度是数组类型的一部分。</strong></p><p>那么<code>[3]int</code>和<code>[4]int</code>是两个不同的数组类型。<strong>数组长度必须是常量表达式。</strong></p><p>同时组值可以具有索引和索引对应的值<code>d:=[...]int{9:-1}</code>,定义了一个拥有10个元素的数组d，最后一个元素值为-1，其余都是0值。</p><p>当函数参数传入的是一个数组时候，传入的参数都会创建一个副本，然后赋值给对应的函数变量。Go中<strong>把数组看作是值传递</strong>，而在其他语言当中，数组是<strong>隐式的引用传递。</strong></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	arrayA <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">}</span>
	<span class="token keyword">var</span> arrayB <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span>

	arrayB <span class="token operator">=</span> arrayA

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;arrayA : %p , %v\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arrayA<span class="token punctuation">,</span> arrayA<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;arrayB : %p , %v\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arrayB<span class="token punctuation">,</span> arrayB<span class="token punctuation">)</span>

	<span class="token function">testArray</span><span class="token punctuation">(</span>arrayA<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">testArray</span><span class="token punctuation">(</span>x <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;func Array : %p , %v\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211024194617.png" alt="image-20211024194617478" tabindex="0" loading="lazy"><figcaption>image-20211024194617478</figcaption></figure><p>可以看到，三个内存地址都不同，这也就验证了 Go 中数组赋值和函数传参都是值复制的。</p><blockquote><p>❓：那么这会导致什么问题？</p></blockquote><p>假想每次传参都用数组，那么每次数组都要被复制一遍。如果数组大小有 100万，在64位机器上就需要花费大约 800W 字节，即 8MB 内存。这样会消耗掉大量的内存。</p><blockquote><p>❗：解决方案之一：</p></blockquote><p>使用数组指针，同时也允许被调函数修改调用方数组中的元素。但是也有缺点：数组本身是不可变的，无法为数组添加和删除元素。</p><blockquote><p>💡：由于数组长度不可变的特性等原因，除在特殊情况下，很少使用数组，一般使用<code>Slice</code></p></blockquote><h3 id="原理解析" tabindex="-1"><a class="header-anchor" href="#原理解析"><span>原理解析</span></a></h3><h4 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h4><p>其实数组在初始化之后大小就无法改变了。相同的数据类型是需要满足两个条件，分别是：存储元素类型和数据大小。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//src/cmd/compile/internal/types/type.go</span>
<span class="token comment">// NewArray returns a new fixed-length array Type.</span>
<span class="token keyword">func</span> <span class="token function">NewArray</span><span class="token punctuation">(</span>elem <span class="token operator">*</span>Type<span class="token punctuation">,</span> bound <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>Type <span class="token punctuation">{</span>
	<span class="token keyword">if</span> bound <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		base<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;NewArray: invalid bound %v&quot;</span><span class="token punctuation">,</span> bound<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	t <span class="token operator">:=</span> <span class="token function">newType</span><span class="token punctuation">(</span>TARRAY<span class="token punctuation">)</span>
	t<span class="token punctuation">.</span>extra <span class="token operator">=</span> <span class="token operator">&amp;</span>Array<span class="token punctuation">{</span>Elem<span class="token punctuation">:</span> elem<span class="token punctuation">,</span> Bound<span class="token punctuation">:</span> bound<span class="token punctuation">}</span>
	<span class="token keyword">if</span> elem<span class="token punctuation">.</span><span class="token function">HasShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">SetHasShape</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> t
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译期间，数组类型由上诉函数生成，该类型包含两个字段，分别是元素类型 <code>Elem</code>和数据大小 <code>Bound</code>，<code>if</code>语句判断是否在堆中初始化。</p><p>数据有两种声明方式，第一种声明方式<code>b:=[3]int{1,2,3}</code>，变量类型会在类型检查阶段被提取出来，然后使用<code>NewArray</code>函数生成一个结构体。</p><p>第二种声明方式<code>[...]int{1,2,3}</code>，需要推导数组大小，</p><h2 id="切片" tabindex="-1"><a class="header-anchor" href="#切片"><span>切片</span></a></h2><p><code>slice</code> 表示一个拥有相同类型元素的可边长度的序列。</p><p>用切片解决上面那个问题，那么切片的优势也会表现出来。</p><p><strong>用切片传数组参数，既可以达到节约内存的目的，也可以达到合理处理好共享内存的问题。切片是引用传递，所以它们不需要使用额外的内存并且比使用数组更有效率。</strong></p><p><code>Slice</code>由三个元素组成</p><ul><li><code>data</code> :元素存哪里</li><li><code>len</code> :存了多少个元素</li><li><code>cap</code> :可以存多少个元素</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> egg <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	<span class="token comment">//var egg []int=make([]int,2,5)</span>
	<span class="token comment">//egg=append(egg,1)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;addres:%p,first item address:%p len:%v cap:%v data:%v&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>egg<span class="token punctuation">,</span>egg<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span>egg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//var egg []int</span>
	<span class="token keyword">var</span> egg <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
	<span class="token comment">//egg=append(egg,1)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;addres:%p,first item address:%p len:%v cap:%v data:%v&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>egg<span class="token punctuation">,</span>egg<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span>egg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当定义一个<code>Slice</code> ,就会构造一个如下的一个结构</p><p>切片结构的地址为0xc000004078</p><ul><li><p>data的地址则为0x0 没有分配底层数组，这里就为nil</p></li><li><p>len为0</p></li><li><p>cap为0</p></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211025220403.png" alt="image-20211025220403035" tabindex="0" loading="lazy"><figcaption>image-20211025220403035</figcaption></figure><p>如果通过make的方式去定义一个Slice，就会定义如下情况</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211025220435.png" alt="image-20211025220435472" tabindex="0" loading="lazy"><figcaption>image-20211025220435472</figcaption></figure><p>当你使用make去定义这个变量，会分配三个结构，还会开辟一段内存作为他的底层数组。还会初始化为int类型的零值。</p><p>目前的Slice只存储了两个元素，此时的切片结构</p><ul><li><code>data</code>应该指向开辟数组的首地址</li><li><code>len</code>为2</li><li><code>cap</code>为5</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//var egg []int</span>
	<span class="token keyword">var</span> egg <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
	egg<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>egg<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;addres:%p,first item address:%p len:%v cap:%v data:%v&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>egg<span class="token punctuation">,</span>egg<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span>egg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们添加一个元素时候，会将底层数组第三位改成3，len改成3</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026141237.png" alt="image-20211026141230400" tabindex="0" loading="lazy"><figcaption>image-20211026141230400</figcaption></figure><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//var egg []int</span>
	<span class="token keyword">var</span> egg <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
	egg<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>egg<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
	egg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;addres:%p,first item address:%p len:%v cap:%v data:%v&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>egg<span class="token punctuation">,</span>egg<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span>egg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们修改一个元素值时候，地址等不会发生改变，只有值发生了变化。</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026141521.png" alt="image-20211026141521651" tabindex="0" loading="lazy"><figcaption>image-20211026141521651</figcaption></figure><p>已经存储的是可以进行安全读写的。</p><blockquote><p>❗：如果超出len的范围访问元素，属于越界访问，会发生panic</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026141749.png" alt="image-20211026141749149" tabindex="0" loading="lazy"><figcaption>image-20211026141749149</figcaption></figure></blockquote><p>同时可以通过append去为未开辟底层数组的切片结构开辟一个底层数组</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//var egg []int</span>
	<span class="token keyword">var</span> egg <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	egg<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>egg<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;addres:%p,first item address:%p len:%v cap:%v data:%v&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>egg<span class="token punctuation">,</span>egg<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span>egg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026142501.png" alt="image-20211026142501669" tabindex="0" loading="lazy"><figcaption>image-20211026142501669</figcaption></figure><h3 id="底层数组" tabindex="-1"><a class="header-anchor" href="#底层数组"><span>底层数组</span></a></h3><p>前面所提到的：<strong>数组是一个具有固定长度且拥有0个或者多个相同数据类型元素的序列。</strong></p><p>定义<code>int</code>类型的<code>slice</code>，那么底层数组对应的<code>int</code>类型</p><p>定义<code>string</code>类型的<code>slice</code>，那么底层数组对应的<code>string</code>类型</p><blockquote><p>💡：切片结构的data不一定指向底层数组的首地址，指向开始元素的地址。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	egg<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span>

	ans1<span class="token operator">:=</span>egg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>
	ans2<span class="token operator">:=</span>egg<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;addres:%p,len:%v cap:%v data:%v \\n&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>egg<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span>egg<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;addres:%p,first item address:%p,egg item address:%p len:%v cap:%v data:%v \\n&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ans1<span class="token punctuation">,</span>ans1<span class="token punctuation">,</span><span class="token operator">&amp;</span>egg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>ans1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>ans1<span class="token punctuation">)</span><span class="token punctuation">,</span>ans1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;addres:%p,first item address:%p,egg item address:%p len:%v cap:%v data:%v\\n&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ans2<span class="token punctuation">,</span>ans2<span class="token punctuation">,</span><span class="token operator">&amp;</span>egg<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>ans2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>ans2<span class="token punctuation">)</span><span class="token punctuation">,</span>ans2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026144659.png" alt="image-20211026144659145" tabindex="0" loading="lazy"><figcaption>image-20211026144659145</figcaption></figure><p><strong>不同slice与声明的数组可以共用一个底层数组</strong></p><p><code>ans1</code>结构如下：</p><ul><li><code>data</code>指向数组中索引为1的元素地址</li><li><code>len</code>为3</li><li><code>cap</code>为9</li></ul><p><code>ans1</code>的元素是<code>egg</code>索引1到4，左闭右开的区间，容量是从索引1到底层数组结束，所以为9</p><p><code>ans2</code>结构如下：</p><ul><li><code>data</code>指向数组中索引为7的元素地址</li><li><code>len</code>为3</li><li><code>cap</code>为3</li></ul><p><code>ans2</code>的元素是<code>egg</code>索引7到数组结束，容量是从索引7到底层数组结束，所以为3</p><p><code>ans1</code>的可读写范围是底层数组的索引1到3，如果想扩大读写范围，可以<strong>利用append或者改变slice的范围</strong></p><blockquote><p>❓：那么如果ans2使用append去添加元素，会发生什么？</p></blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	egg<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span>

	ans1<span class="token operator">:=</span>egg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>
	ans2<span class="token operator">:=</span>egg<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

	ans2<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>ans2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;addres:%p,len:%v cap:%v data:%v \\n&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>egg<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>egg<span class="token punctuation">)</span><span class="token punctuation">,</span>egg<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;addres:%p,first item address:%p,egg item address:%p len:%v cap:%v data:%v \\n&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ans1<span class="token punctuation">,</span>ans1<span class="token punctuation">,</span><span class="token operator">&amp;</span>egg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>ans1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>ans1<span class="token punctuation">)</span><span class="token punctuation">,</span>ans1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;addres:%p,first item address:%p,egg item address:%p len:%v cap:%v data:%v\\n&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ans2<span class="token punctuation">,</span>ans2<span class="token punctuation">,</span><span class="token operator">&amp;</span>egg<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>ans2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>ans2<span class="token punctuation">)</span><span class="token punctuation">,</span>ans2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026150033.png" alt="image-20211026150032973" tabindex="0" loading="lazy"><figcaption>image-20211026150032973</figcaption></figure><p>因为之前ans1，ans2与egg共用一个底层数组，数组长度是不可改变的。</p><p>改变ans2的可读写范围</p><ul><li>改变ans2的slice范围，但是如果值大于了10就会发生panic。</li><li>通过append，会发生重新开辟底层数组，将值拷贝然后添加值。</li></ul><p>如上图所示。<strong>当使用append为ans2添加元素，ans2会新开辟一个底层数组，将之前的数组元素进行拷贝然后修改底层数组的值。</strong></p><blockquote><p>❓：我们只给ans2添加一个元素，容量从3变成了6呢？</p></blockquote><h3 id="slice扩容规则" tabindex="-1"><a class="header-anchor" href="#slice扩容规则"><span>Slice扩容规则</span></a></h3><blockquote><p>1️⃣:STEP1 预估扩容后的容量</p></blockquote><p>预估规则：</p><ul><li><p>如果扩容前容量翻倍小于所需容量（oldCap*2&lt;cap），那么新容量直接等于所需容量（newcap=cap）</p></li><li><p>当原slice的cap（oldCap&lt;1024）小于1024时，新slice的cap变为原来的2倍；</p></li><li><p>原slice的cap大于1024（oldCap&gt;1024）时，新slice变为原来的1.25倍</p></li></ul><p>证明：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//规则1</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> ans <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	ans<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;cap:%d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span>
	ans<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;cap:%d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//规则2</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  oldCap <span class="token operator">:=</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4096</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    newCap <span class="token operator">:=</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
    <span class="token keyword">if</span> newCap <span class="token operator">!=</span> oldCap <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;oldCap = %-4d  after append %-4d  newCap = %-4d\\n&quot;</span><span class="token punctuation">,</span> oldCap<span class="token punctuation">,</span> i<span class="token punctuation">,</span> newCap<span class="token punctuation">)</span>
      oldCap <span class="token operator">=</span> newCap
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026153502.png" alt="image-20211026153502610" tabindex="0" loading="lazy"><figcaption>image-20211026153502610</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026152707.png" alt="image-20211026152707948" tabindex="0" loading="lazy"><figcaption>image-20211026152707948</figcaption></figure><blockquote><p>2️⃣:STEP2 计算需要的内存大小</p></blockquote><p>预估容量*元素类型大小</p><blockquote><p>3️⃣：STEP3 匹配合适的内存规格</p></blockquote><p>例子：</p><p>newcap=5，定义是int类型</p><p>需要内存大小为5*8=40，会匹配到48的内存大小。</p><p>48的内存大小可以存6个元素。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2>`,95),k={href:"https://mp.weixin.qq.com/s/rbilTQKZ6WwlsQvyVA-qVA",target:"_blank",rel:"noopener noreferrer"},r={href:"https://halfrost.com/go_slice/#toc-0",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"奇怪的问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#奇怪的问题"},[n("span",null,"奇怪的问题")])],-1),g=n("ol",null,[n("li",null,[s("为什么"),n("code",null,"slice"),s("的扩容规则是这样的？为什么容量大于1024就扩容1.25倍呢？")])],-1);function m(v,b){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",k,[s("【Golang源码系列】二：Slice实现原理分析"),t(a)])]),n("p",null,[n("a",r,[s("深入解析 Go 中 Slice 底层实现"),t(a)])]),d,g])}const y=p(l,[["render",m],["__file","02.数组与slice.html.vue"]]),w=JSON.parse('{"path":"/village/02.%E6%95%B0%E7%BB%84%E4%B8%8Eslice.html","title":"数组与slice","lang":"zh-CN","frontmatter":{"title":"数组与slice","shortTile":"数组与slice","description":"数组与Slice原理 数组 基本使用 数组是一个具有固定长度且拥有0个或者多个相同数据类型元素的序列。 数组的每一个元素都是通过索引去访问的，索引从0到数组长度减一。Go内置的函数len可以返回数组中元素个数。 image-20211024192051643image-20211024192051643 默认情况下，声明一个数组var a [3]int...","icon":"openmoji:face-with-monocle","author":{"name":"团子","url":"https://github.com/Tuanzi-bug"},"isOriginal":true,"date":"2022-07-01T20:53:31.000Z","category":["语言基础","go"],"license":null,"sticky":false,"star":false,"article":true,"timeline":true,"image":null,"banner":null,"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/village/02.%E6%95%B0%E7%BB%84%E4%B8%8Eslice.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"数组与slice"}],["meta",{"property":"og:description","content":"数组与Slice原理 数组 基本使用 数组是一个具有固定长度且拥有0个或者多个相同数据类型元素的序列。 数组的每一个元素都是通过索引去访问的，索引从0到数组长度减一。Go内置的函数len可以返回数组中元素个数。 image-20211024192051643image-20211024192051643 默认情况下，声明一个数组var a [3]int..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211024192051.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-09T16:48:30.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"数组与slice"}],["meta",{"property":"article:author","content":"团子"}],["meta",{"property":"article:published_time","content":"2022-07-01T20:53:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-09T16:48:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数组与slice\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211024192051.png\\",\\"https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211024194617.png\\",\\"https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211025220403.png\\",\\"https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211025220435.png\\",\\"https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026141237.png\\",\\"https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026141521.png\\",\\"https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026141749.png\\",\\"https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026142501.png\\",\\"https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026144659.png\\",\\"https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026150033.png\\",\\"https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026153502.png\\",\\"https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211026152707.png\\"],\\"datePublished\\":\\"2022-07-01T20:53:31.000Z\\",\\"dateModified\\":\\"2024-02-09T16:48:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"团子\\",\\"url\\":\\"https://github.com/Tuanzi-bug\\"}]}"]]},"headers":[{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"原理解析","slug":"原理解析","link":"#原理解析","children":[]}]},{"level":2,"title":"切片","slug":"切片","link":"#切片","children":[{"level":3,"title":"底层数组","slug":"底层数组","link":"#底层数组","children":[]},{"level":3,"title":"Slice扩容规则","slug":"slice扩容规则","link":"#slice扩容规则","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]},{"level":2,"title":"奇怪的问题","slug":"奇怪的问题","link":"#奇怪的问题","children":[]}],"git":{"createdTime":1707497310000,"updatedTime":1707497310000,"contributors":[{"name":"TuanZi-bug","email":"yangaoyu33@gmail.com","commits":1}]},"readingTime":{"minutes":8.58,"words":2575},"filePathRelative":"village/02.数组与slice.md","localizedDate":"2022年7月1日","autoDesc":true}');export{y as comp,w as data};
