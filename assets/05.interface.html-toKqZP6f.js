import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as i,c,b as e,d as n,a as s,e as p}from"./app-j2w6AIWi.js";const l={},r=e("h1",{id:"接口-interface",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#接口-interface"},[e("span",null,"接口 interface")])],-1),d={href:"https://mp.weixin.qq.com/s?__biz=Mzg5NjIwNzIxNQ==&mid=2247484072&idx=2&sn=0363c7102943888e0f390f3f5a9ae662&chksm=c005d2a8f7725bbe068f418f72bd9f8ecc3aec3daf11ba7e7ad80d202e6ad90ceec459c5c7e8&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},u={href:"https://halfrost.com/go_interface/",target:"_blank",rel:"noopener noreferrer"},m=p(`<h2 id="空接口-interface" tabindex="-1"><a class="header-anchor" href="#空接口-interface"><span>空接口 interface{}</span></a></h2><p>空接口类型可以接受任意类型的数据。干的事情不多，记录数据的位置和数据类型即可。空接口类型如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> eface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    _type <span class="token operator">*</span>_type <span class="token comment">//指向接口的动态类型元数据</span>
    data  unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//指向接口的动态值。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子🌰：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> e <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//这里定了一个空接口类型</span>

<span class="token comment">//在 e 没有赋值前</span>
<span class="token keyword">type</span> eface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    _type <span class="token operator">*</span>_type <span class="token comment">//指向接口的动态类型元数据 -&gt;nil</span>
    data  unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//指向接口的动态值。 -&gt;nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>f<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;eggo.txt&quot;</span><span class="token punctuation">)</span>
e <span class="token operator">=</span> f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将 <code>*os.File</code> 类型的变量 <code>f</code> 赋值给 <code>e</code>。来看看变量 <code>e</code> 的结构。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> eface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    _type <span class="token operator">*</span>_type <span class="token comment">//指向接口的动态类型元数据 -&gt;*os.File 的类型元数据</span>
    data  unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//指向接口的动态值。 -&gt;f</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注：类型元数据这里可以找到类型关联的方法元数据列表。</strong></p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L53Y12T80IUoDOdNgcCOb0BBUWtBay6WaLES8uevBQbeM0Amxibne8wIk27uAFpiciawgyn6Y5FpRhFw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="非空接口" tabindex="-1"><a class="header-anchor" href="#非空接口"><span>非空接口</span></a></h2><p>非空接口就是有方法列表的接口类型。如果一个变量想赋值一个非空接口类型，那么其类型必须实现该接口的要求的所有方法才行。非空接口类型如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> iface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    tab   <span class="token operator">*</span>itab
    data  unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//接口的动态值</span>
<span class="token punctuation">}</span>
<span class="token comment">//itab</span>
<span class="token keyword">type</span> itab <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    inter  <span class="token operator">*</span>interfacetype <span class="token comment">//接口的类型元数据</span>
    _type  <span class="token operator">*</span>_type <span class="token comment">//指向接口的动态类型元数据</span>
    hash   <span class="token builtin">uint32</span> <span class="token comment">//itab._type中拷贝来的，类型哈希值，用于快速判断类型是否相等时使用，后续会有介绍</span>
    <span class="token boolean">_</span>      <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
    fun    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin">uintptr</span> <span class="token comment">//动态类型实现的接口要求方法地址</span>
<span class="token punctuation">}</span>
<span class="token comment">//interfacetype</span>
<span class="token keyword">type</span> interfacetype <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    typ      _type
    pkgpath  name
    mhdr     <span class="token punctuation">[</span><span class="token punctuation">]</span>imethod <span class="token comment">//接口要求的方法列表</span>
<span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子🌰：</p><p>我们声明了一个 <code>io.ReadWriter</code> 的接口类型变量 <code>rw</code>。被赋值前，结构如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> iface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    tab   <span class="token operator">*</span>itab  <span class="token comment">//-&gt;nil</span>
    data  unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//接口的动态值 -&gt;nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>f<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;eggo.txt&quot;</span><span class="token punctuation">)</span>
rw <span class="token operator">=</span> f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将 <code>*os.File</code> 类型变量 <code>f</code>。赋值给 <code>rw</code>。</p><p>那么 <code>rw</code> 的动态值是 <code>f</code>，动态类型是 <code>*os.File</code>。<code>itab.fun</code> 这个数组记录的是 <code>*os.File</code> 这个类型实现的 <code>io.ReadWriter</code> 接口的方法。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L53Y12T80IUoDOdNgcCOb0BbQ8syrnoVjFbicOmEkIpPJBEOucLzmWEWPCEry6vSEeWrXxULZKs4cA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>注：<code>rw</code> 能使用的方法只是接口类型已经注册的。</p><p>总结：</p><blockquote><p>接口，你可以看作是一个工具（枪），你往里面装怎么样的子弹，他就会打出什么样子弹。</p></blockquote><h2 id="itab缓存" tabindex="-1"><a class="header-anchor" href="#itab缓存"><span>itab缓存</span></a></h2><p>一个非空接口类型 <code>interfacetype</code> 和一个动态类型 <code>_type</code> 就可以确定一个 <code>itab</code>了。剩余的字段要么来自 <code>_type</code> 要么是动态类型的方法。似乎这个 <code>itab</code> 是可以复用的。那么对于两个个非空接口类型定义的变量，赋值后只要动态类型不变，变得只是动态值 <code>data</code>。</p><p>实际上 <code>Go</code> 语言会把用到的 <code>itab</code> 结构体缓存起来，并且以 <strong>&lt;接口类型，动态类型&gt;</strong> 组合为 key，以 <code>*itab</code> 为 <code>value</code>，构成一个哈希表，用于存储与查询以及复用 <code>itab</code> 信息</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L75jtH0rYodSfoAGwwpIyARicXkrbAZP3pmf1LVqkylMEGMkskmd1CYBmkE1PEzt1eTEW9nOBicVbaA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>这个哈希表可与我们使用的 <code>map</code> 底层的哈希表不同，结构设计更为简便。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> itabTableType <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    size    <span class="token builtin">uintptr</span>             <span class="token comment">// length of entries array. Always a power of 2. // entries 数组的长度。总是 2 的幂。</span>
    count   <span class="token builtin">uintptr</span>             <span class="token comment">// current number of filled entries.  //当前填充的entries数目</span>
    entries <span class="token punctuation">[</span>itabInitSize<span class="token punctuation">]</span><span class="token operator">*</span>itab <span class="token comment">// really [size] large //实际的大小</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当需要一个 <code>itab</code> 会先去 <code>itabTable</code> 里面查找，计算哈希值时会用到接口类型(<code>itab.inter</code>)和动态类型(<code>itab._type</code>)的类型哈希值</li><li>如果能查询到对应的 <code>itab</code> 指针就直接拿来用，如果没有就直接创建一个新的 <code>itab</code>。</li></ul>`,30);function b(g,k){const a=o("ExternalLinkIcon");return i(),c("div",null,[r,e("blockquote",null,[e("p",null,[n("推荐阅读："),e("a",d,[n("【Golang】图解Interface"),s(a)])]),e("p",null,[e("a",u,[n("深入研究 Go interface 底层实现"),s(a)])])]),m])}const y=t(l,[["render",b],["__file","05.interface.html.vue"]]),h=JSON.parse('{"path":"/novice_village/Go/SourceCode/05.interface.html","title":"interface","lang":"zh-CN","frontmatter":{"title":"interface","date":"2022-07-01T20:53:31.000Z","category":["语言基础","go"],"author":{"name":"团子","url":"https://github.com/baici1"},"comment":false,"description":"接口 interface 推荐阅读：【Golang】图解Interface 深入研究 Go interface 底层实现 空接口 interface{} 空接口类型可以接受任意类型的数据。干的事情不多，记录数据的位置和数据类型即可。空接口类型如下： 举个例子🌰： 如果将 *os.File 类型的变量 f 赋值给 e。来看看变量 e 的结构。 注：类型...","icon":null,"isOriginal":true,"star":false,"article":true,"timeline":true,"image":null,"banner":null,"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/novice_village/Go/SourceCode/05.interface.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"interface"}],["meta",{"property":"og:description","content":"接口 interface 推荐阅读：【Golang】图解Interface 深入研究 Go interface 底层实现 空接口 interface{} 空接口类型可以接受任意类型的数据。干的事情不多，记录数据的位置和数据类型即可。空接口类型如下： 举个例子🌰： 如果将 *os.File 类型的变量 f 赋值给 e。来看看变量 e 的结构。 注：类型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L53Y12T80IUoDOdNgcCOb0BBUWtBay6WaLES8uevBQbeM0Amxibne8wIk27uAFpiciawgyn6Y5FpRhFw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-18T07:16:08.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"interface"}],["meta",{"property":"article:author","content":"团子"}],["meta",{"property":"article:published_time","content":"2022-07-01T20:53:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-18T07:16:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"interface\\",\\"image\\":[\\"https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L53Y12T80IUoDOdNgcCOb0BBUWtBay6WaLES8uevBQbeM0Amxibne8wIk27uAFpiciawgyn6Y5FpRhFw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L53Y12T80IUoDOdNgcCOb0BbQ8syrnoVjFbicOmEkIpPJBEOucLzmWEWPCEry6vSEeWrXxULZKs4cA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L75jtH0rYodSfoAGwwpIyARicXkrbAZP3pmf1LVqkylMEGMkskmd1CYBmkE1PEzt1eTEW9nOBicVbaA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\"],\\"datePublished\\":\\"2022-07-01T20:53:31.000Z\\",\\"dateModified\\":\\"2024-03-18T07:16:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"团子\\",\\"url\\":\\"https://github.com/baici1\\"}]}"]]},"headers":[{"level":2,"title":"空接口 interface{}","slug":"空接口-interface","link":"#空接口-interface","children":[]},{"level":2,"title":"非空接口","slug":"非空接口","link":"#非空接口","children":[]},{"level":2,"title":"itab缓存","slug":"itab缓存","link":"#itab缓存","children":[]}],"git":{"createdTime":1710746168000,"updatedTime":1710746168000,"contributors":[{"name":"TuanZi-bug","email":"yangaoyu33@gmail.com","commits":1}]},"readingTime":{"minutes":3.37,"words":1012},"filePathRelative":"novice_village/Go/SourceCode/05.interface.md","localizedDate":"2022年7月1日","autoDesc":true}');export{y as comp,h as data};
