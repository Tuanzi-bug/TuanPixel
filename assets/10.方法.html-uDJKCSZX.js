import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as p,c as o,b as n,d as a,a as c,e as i}from"./app-j2w6AIWi.js";const l={},u=n("h1",{id:"方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#方法"},[n("span",null,"方法")])],-1),d={href:"https://mp.weixin.qq.com/s/z2i1evUStbMHOZwq__SmRQ",target:"_blank",rel:"noopener noreferrer"},r=i(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>方法即 <code>Method</code>，只要你接触过面对对象思想的语言，都会了解。Go 语言支持为任意类型实现方法。</p><p>举个例子🌰：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Hi! &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>name
	<span class="token keyword">return</span> a<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a <span class="token operator">:=</span> A<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;eggo&quot;</span><span class="token punctuation">}</span>
	<span class="token comment">// 1）编译器的语法糖，提供面向对象的语法</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//Hi! eggo</span>
	<span class="token comment">// 2）更贴近真实实现的写法，和普通函数调用几乎没什么不同</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//Hi! eggo</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面有两种写法，都能顺利通过编译并且执行，实际上这两种写法会生成同样的机器码。</p><p>第一种：<code>a.Name()</code>，比较常规，方便。这是一种语法糖。</p><p>第二种：<code>A.Name(a)</code>，是一种比较严谨写法的，更贴近于原始。</p><p>这两者是等价的，编译器会识别第一种，然后帮我们把第一种转变成第二种。以下是证据：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Hi! &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>name
	<span class="token keyword">return</span> a<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">Name</span><span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Hi! &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>name
	<span class="token keyword">return</span> a<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	t1 <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
	t2 <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span>
	<span class="token comment">// 会输出true，通过反射来验证，两者的类型是相同的</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> t2<span class="token punctuation">)</span><span class="token comment">//true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出 <code>True</code>，代表两者类型一致。我们可以发现第二种方式将类型为 <code>A</code> 的变量 <code>a</code>，作为函数第一个参数引入，其余的部分都没有发生改变。说明：方法本质上其实一个普通的函数，只不过会将定义的变量 <code>a</code> 作为一个参数（隐含）。</p><h2 id="值接收者" tabindex="-1"><a class="header-anchor" href="#值接收者"><span>值接收者</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Hi! &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>name
	<span class="token keyword">return</span> a<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a <span class="token operator">:=</span> A<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;eggo&quot;</span><span class="token punctuation">}</span>
	<span class="token comment">// 1）编译器的语法糖，提供面向对象的语法</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//Hi! eggo</span>
	<span class="token comment">// 2）更贴近真实实现的写法，和普通函数调用几乎没什么不同</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//Hi! eggo</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//eggo</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>既然和普通函数一致，那么我们分析一下他 <code>a.Name()</code> 的函数调用栈。</p><p><code>main</code> 函数栈帧局部变量为 <code>a</code> 类型 <code>A</code>，有一个 <code>string</code> 类型的成员，所以他的数据会被放到数据段，在局部变量则是地址，<code>a.Name()</code> 会被编译器转化为 <code>A.Name(a)</code> 这样的函数调用。所以参数是 a，会值拷贝到参数空间。</p><p>当函数 <code>A.Name(a)</code> 执行时候，改变的是参数空间 <code>a</code> 的 <code>string</code> 成员 <code>name</code>，那么数据段会重新建立一个字符串，将 <code>name</code> 的地址指向这个新的字符串。然后值拷贝成员到返回值空间。所以会输出 <code>Hi! eggo</code> 。</p><p>但是局部变量 <code>a</code> 并没有发生改变。因为作为值接收者去调用方法，传参都是值拷贝，改变的是参数 <code>a</code>，而不是局部变量 <code>a</code>。如果你想改变值，需要利用指针接收者。</p><h2 id="指针接收者" tabindex="-1"><a class="header-anchor" href="#指针接收者"><span>指针接收者</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>pa <span class="token operator">*</span>A<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	pa<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Hi! &quot;</span> <span class="token operator">+</span> pa<span class="token punctuation">.</span>name
	<span class="token keyword">return</span> pa<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a <span class="token operator">:=</span> A<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;eggo&quot;</span><span class="token punctuation">}</span>
	pa <span class="token operator">:=</span> <span class="token operator">&amp;</span>a
    <span class="token comment">//注：这里函数调用了两次所以是两个 Hi！。</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pa<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Hi! eggo</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>A<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//Hi! Hi! eggo</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pa<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//Hi! Hi! eggo</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在是指针接收者，那么函数调用栈又会是怎么样的呢？</p><p>main 函数调用栈有两个局部变量分别是 <code>a,pa</code>。<code>pa</code> 是存储变量 <code>a</code> 的地址。<code>pa.Name()</code> 会由编译器转换为<code>(*A).Name(pa)</code> 函数调用，所以参数空间拷贝参数 <code>pa</code> 的值，也就是局部变量 <code>a</code> 的地址。</p><p>当函数 <code>(*A).Name(pa)</code> 执行时候，会新建一个字符串，然后参数 &amp;a 的 string 类型成员会重新指向这个新的字符串，然后值拷贝 <code>string</code> 类型的成员到返回值空间，所以会输出 <code>Hi! eggo</code>。</p><p>因为参数拷贝的是 <code>pa</code> 也就是 <code>a</code>的地址，所以会这里会改变 <code>a</code> 的 <code>string</code> 类型成员地址指向的 <code>string</code> 结构体的值。</p><h2 id="语法糖" tabindex="-1"><a class="header-anchor" href="#语法糖"><span>语法糖</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>pa <span class="token operator">*</span>A<span class="token punctuation">)</span> <span class="token function">SetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	pa<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Hi! &quot;</span> <span class="token operator">+</span> pa<span class="token punctuation">.</span>name
	<span class="token keyword">return</span> pa<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a <span class="token operator">:=</span> A<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;eggo&quot;</span><span class="token punctuation">}</span>
	pa <span class="token operator">:=</span> <span class="token operator">&amp;</span>a
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pa<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//eggo</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">SetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//Hi! eggo</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//Hi! eggo</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有没有感觉调用的很奇怪！调用者和方法都不太搭！</p><p>这里是语法糖，编译期间，会把 <code>pa.GetName()</code> 这种方法调用转换成 <code>(*pa).GetName()</code>，也就等价于执行 <code>A.GetName(*pa)</code>。而 <code>a.SetName()</code> 会被转换成 <code>(&amp;a).SetName()</code>，也相当于执行<code>(*A).SetName(&amp;a)</code>。</p><p>但是这种语法糖不能用于<code>字面量</code>。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;eggo&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//报错：Cannot call a pointer method on &#39;(A{name: &quot;eggo&quot;})&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样是拿不到字面量的地址的，所以转化成指针接收者调用。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;eggo&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//不会报错，这里使用的是值接收者。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="方法的-function-value" tabindex="-1"><a class="header-anchor" href="#方法的-function-value"><span>方法的 Function value</span></a></h2><p>Go语言中函数作为变量、参数和返回值时，都是以 <code>Function Value</code> 的形式存在的。也知道闭包只是有捕获列表(<code>catch list</code>)的 <code>Funtion Value</code> 而已。</p><blockquote><p>方法表达式</p></blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	a <span class="token operator">:=</span> A<span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">&quot;eggo&quot;</span><span class="token punctuation">}</span>

	f1 <span class="token operator">:=</span> A<span class="token punctuation">.</span>GetName      <span class="token comment">//方法表达式</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment">//eggo</span>

	f2 <span class="token operator">:=</span> a<span class="token punctuation">.</span>GetName      <span class="token comment">//方法变量</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment">//eggo</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果像 <code>f1</code> 这样，把一个类型的方法赋值给他，这样的变量就被称为**“方法表达式”**。其实你可以这样理解：f1 被赋值的是类型 <code>A</code> 的函数，这个函数使用方法 <code>A.Name(a)</code>。所以 <code>f1</code> 的调用方式是传入一个 <code>A</code> 类型变量 <code>a</code>。</p><p>你可以当作在使用 <code>A.Name(a A)</code> 这个函数。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L44bYTmxkYjVu1P3PkvCtQviaxRoRglIcneX6KLxjX0RonABGUyiabo7nsWzNbgf8axWzv3XhXic0Kibg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><blockquote><p>方法变量</p></blockquote><p>像 <code>f2</code> 这样，通过 <code>a.GetName</code> 进行赋值，这样的变量被称为**“方法变量”**。通过方法变量执行方法时，我们无需再传入方法接收者作为第一个参数，这是因为编译器替我们做了处理，相当于 <code>f2()==A.Name(a)</code>。</p><blockquote><p>作为返回值</p></blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">GetFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	a <span class="token operator">:=</span> A<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;eggo in GetFunc&quot;</span><span class="token punctuation">}</span>
	<span class="token keyword">return</span> a<span class="token punctuation">.</span>GetName
<span class="token punctuation">}</span>
<span class="token comment">//等价于</span>
<span class="token comment">/*
func GetFunc() func() string {
	a := A{name: &quot;eggo in GetFunc&quot;}
	return func() string {
		return a.GetName()
	}
}
*/</span>
<span class="token comment">//进而等价于</span>
<span class="token comment">/*
func GetFunc() func() string {
	a := A{name: &quot;eggo in GetFunc&quot;}
	return func() string {
		return A.GetName(a)
	}
}
*/</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a <span class="token operator">:=</span> A<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;eggo in main&quot;</span><span class="token punctuation">}</span>
	f2 <span class="token operator">:=</span> a<span class="token punctuation">.</span>GetName
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//这里输出：eggo in main</span>

	f3 <span class="token operator">:=</span> <span class="token function">GetFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//这里输出：eggo in GetFunc</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以发现多次等价后，发现变量 <code>a</code> 是捕获变量，<code>f3</code> 是闭包对象。<code>f2</code> 这个方法变量，使用的是 <code>main</code> 函数的局部变量 <code>a</code>。这样就很好理解上面这段示例程序的输出结果了。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L44bYTmxkYjVu1P3PkvCtQvqGXpIheCibf6xZpEJ8GE2plvIQd6IoQKticlft4a8pg2FzpEKQqPFl2A/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>`,43);function k(m,v){const s=e("ExternalLinkIcon");return p(),o("div",null,[u,n("blockquote",null,[n("p",null,[a("参考阅读："),n("a",d,[a("【Golang】方法 Method"),c(s)])])]),r])}const f=t(l,[["render",k],["__file","10.方法.html.vue"]]),h=JSON.parse('{"path":"/novice_village/Go/SourceCode/10.%E6%96%B9%E6%B3%95.html","title":"方法","lang":"zh-CN","frontmatter":{"title":"方法","date":"2022-07-01T20:53:31.000Z","category":["语言基础","go"],"author":{"name":"团子","url":"https://github.com/baici1"},"comment":false,"description":"方法 参考阅读：【Golang】方法 Method 介绍 方法即 Method，只要你接触过面对对象思想的语言，都会了解。Go 语言支持为任意类型实现方法。 举个例子🌰： 上面有两种写法，都能顺利通过编译并且执行，实际上这两种写法会生成同样的机器码。 第一种：a.Name()，比较常规，方便。这是一种语法糖。 第二种：A.Name(a)，是一种比较严...","icon":null,"isOriginal":true,"star":false,"article":true,"timeline":true,"image":null,"banner":null,"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/novice_village/Go/SourceCode/10.%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"方法"}],["meta",{"property":"og:description","content":"方法 参考阅读：【Golang】方法 Method 介绍 方法即 Method，只要你接触过面对对象思想的语言，都会了解。Go 语言支持为任意类型实现方法。 举个例子🌰： 上面有两种写法，都能顺利通过编译并且执行，实际上这两种写法会生成同样的机器码。 第一种：a.Name()，比较常规，方便。这是一种语法糖。 第二种：A.Name(a)，是一种比较严..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L44bYTmxkYjVu1P3PkvCtQviaxRoRglIcneX6KLxjX0RonABGUyiabo7nsWzNbgf8axWzv3XhXic0Kibg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-18T07:16:08.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"方法"}],["meta",{"property":"article:author","content":"团子"}],["meta",{"property":"article:published_time","content":"2022-07-01T20:53:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-18T07:16:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"方法\\",\\"image\\":[\\"https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L44bYTmxkYjVu1P3PkvCtQviaxRoRglIcneX6KLxjX0RonABGUyiabo7nsWzNbgf8axWzv3XhXic0Kibg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L44bYTmxkYjVu1P3PkvCtQvqGXpIheCibf6xZpEJ8GE2plvIQd6IoQKticlft4a8pg2FzpEKQqPFl2A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\"],\\"datePublished\\":\\"2022-07-01T20:53:31.000Z\\",\\"dateModified\\":\\"2024-03-18T07:16:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"团子\\",\\"url\\":\\"https://github.com/baici1\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"值接收者","slug":"值接收者","link":"#值接收者","children":[]},{"level":2,"title":"指针接收者","slug":"指针接收者","link":"#指针接收者","children":[]},{"level":2,"title":"语法糖","slug":"语法糖","link":"#语法糖","children":[]},{"level":2,"title":"方法的 Function value","slug":"方法的-function-value","link":"#方法的-function-value","children":[]}],"git":{"createdTime":1710746168000,"updatedTime":1710746168000,"contributors":[{"name":"TuanZi-bug","email":"yangaoyu33@gmail.com","commits":1}]},"readingTime":{"minutes":5.61,"words":1683},"filePathRelative":"novice_village/Go/SourceCode/10.方法.md","localizedDate":"2022年7月1日","autoDesc":true}');export{f as comp,h as data};
